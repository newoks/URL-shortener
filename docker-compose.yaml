version: '3.8'
services:
  api:
    container_name: url_shortener__api
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    restart: unless-stopped
    volumes:
      - ${LOGGER_DIR_PATH}:${LOGGER_DIR_PATH_INTERNAL}
    env_file:
      - .env
    depends_on:
      - migrations
    ports:
      - ${EXT_API_PORT}:5000
    command: [
      "poetry", "run", "uvicorn", "app:create_app",
      "--host", "0.0.0.0",
      "--port", '5000',
    ]

  postgres:
    container_name: url_shortener__postgres
    image: "postgres:13.1"
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - ${POSTGRES_EXT_PORT}:5432
    volumes:
      - ${POSTGRES_DATA_VOLUME}:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 10s
      retries: 5

  migrations:
    container_name: url_shortener__migrations
    build:
      context: .
      dockerfile: docker/migrations/Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    command: [
        "poetry", "run", "python", "-m", "scripts.migrate"
    ]

networks:
  default:
    name: shared-network

